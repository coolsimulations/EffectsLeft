buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

def mcVersion = "1.18.1"
def modVersion = "0.1.0"
version = "${mcVersion}-${modVersion}"
group = "net.coolsimulations.EffectsLeft" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "EffectsLeft"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    hideOfficialWarningUntilChanged
    
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            arg "-mixin.config=effectsleft.mixins.json"

            mods {
                effectsleft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            mods {
                effectsleft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            args '--mod', 'effectsleft', '--all', '--output', file('src/generated/resources/')

            mods {
                effectsleft {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://maven.architectury.dev/" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
}

mixin {
    add sourceSets.main, "effectsleft.refmap.json"

    // Sets up the mixin config; this gets added to run configurations and the manifest in the final jar
    config "effectsleft.mixins.json"

    // Enables exporting mixin-changed classes to .mixin.out in the run folder
    debug.export = true
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.18'

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:7.1.361")
    implementation fg.deobf("me.shedaniel.cloth:cloth-config-forge:6.0.43")
    implementation fg.deobf("dev.architectury:architectury-forge:3.1.44")

    implementation fg.deobf("mezz.jei:jei-1.18.1:9.2.2.74")

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    processResources.setDuplicatesStrategy(DuplicatesStrategy.WARN)

}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", mcVersion

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include 'META-INF/mods.toml'
        include 'effects left.mixins.json'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':mcVersion
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
        exclude 'META-INF/mods.toml'
    }

task packDev(type: Jar) {
    from sourceSets.main.output
    from sourceSets.main.allJava
    baseName = "EffectsLeft-Dev"
    version = "${project.version}"

    println(defaultTasks)
}

artifacts {
    archives packDev
}

}
